-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\fftTest\fftTest.vhd
-- Created: 2022-11-30 00:07:34
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 9.76563e-07
-- Target subsystem base rate: 9.76563e-07
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        9.76563e-07
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Out1                          ce_out        9.76563e-07
-- Out2                          ce_out        9.76563e-07
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: fftTest
-- Source Path: fftTest
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY fftTest IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Out1                              :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        Out2                              :   OUT   std_logic
        );
END fftTest;


ARCHITECTURE rtl OF fftTest IS

  -- Component Declarations
  COMPONENT fftTest_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_1024_0                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sine_Wave
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_1024_0                    :   IN    std_logic;
          Sine_Wave_out1                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Sine_Wave1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_1024_0                    :   IN    std_logic;
          Sine_Wave_out1                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT FIR_Interpolation
    PORT( clk                             :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          reset                           :   IN    std_logic;
          FIR_Interpolation_in            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          FIR_Interpolation_out           :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT FFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
          dataOut_im                      :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : fftTest_tc
    USE ENTITY work.fftTest_tc(rtl);

  FOR ALL : Sine_Wave
    USE ENTITY work.Sine_Wave(rtl);

  FOR ALL : Sine_Wave1
    USE ENTITY work.Sine_Wave1(rtl);

  FOR ALL : FIR_Interpolation
    USE ENTITY work.FIR_Interpolation(rtl);

  FOR ALL : FFT
    USE ENTITY work.FFT(rtl);

  -- Signals
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_1024_0                     : std_logic;
  SIGNAL Sine_Wave_out1                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sine_Wave_out1_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sine_Wave1_out1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sine_Wave1_out1_signed           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum_add_cast                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Sum_add_cast_1                   : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Sum_add_temp                     : signed(31 DOWNTO 0);  -- sfix32_En14
  SIGNAL Sum_out1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum_out1_1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Constant1_out1                   : real := 0.0;  -- double
  SIGNAL Constant1_out1_is_not0           : std_logic;
  SIGNAL FIR_Interpolation_out1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant1_out1_is_not0_1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL FFT_out1_re                      : std_logic_vector(41 DOWNTO 0);  -- ufix42
  SIGNAL FFT_out1_im                      : std_logic_vector(41 DOWNTO 0);  -- ufix42
  SIGNAL FFT_out2                         : std_logic;
  SIGNAL FFT_out1_re_signed               : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL FFT_out1_im_signed               : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL Magnitude_Square_real_square     : signed(83 DOWNTO 0);  -- sfix84_En56
  SIGNAL Magnitude_Square_imag_square     : signed(83 DOWNTO 0);  -- sfix84_En56
  SIGNAL adder_add_cast                   : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL adder_add_cast_1                 : signed(42 DOWNTO 0);  -- sfix43_En28
  SIGNAL adder_add_cast_2                 : signed(41 DOWNTO 0);  -- sfix42_En28
  SIGNAL adder_add_cast_3                 : signed(42 DOWNTO 0);  -- sfix43_En28
  SIGNAL adder_add_temp                   : signed(42 DOWNTO 0);  -- sfix43_En28
  SIGNAL Magnitude_Square_out1            : signed(41 DOWNTO 0);  -- sfix42_En28

BEGIN
  u_fftTest_tc : fftTest_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_1024_0 => enb_1_1024_0
              );

  u_Sine_Wave : Sine_Wave
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_1024_0 => enb_1_1024_0,
              Sine_Wave_out1 => Sine_Wave_out1  -- sfix16_En14
              );

  u_Sine_Wave1 : Sine_Wave1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_1024_0 => enb_1_1024_0,
              Sine_Wave_out1 => Sine_Wave1_out1  -- sfix16_En14
              );

  u_FIR_Interpolation : FIR_Interpolation
    PORT MAP( clk => clk,
              enb_1_1_1 => enb_1_1_1,
              reset => reset,
              FIR_Interpolation_in => Sum_out1_1,  -- sfix16_En14
              FIR_Interpolation_out => FIR_Interpolation_out1  -- sfix32_En28
              );

  u_FFT : FFT
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => FIR_Interpolation_out1,  -- sfix32_En28
              validIn => Logical_Operator_out1,
              dataOut_re => FFT_out1_re,  -- sfix42_En28
              dataOut_im => FFT_out1_im,  -- sfix42_En28
              validOut => FFT_out2
              );

  Sine_Wave_out1_signed <= signed(Sine_Wave_out1);

  Sine_Wave1_out1_signed <= signed(Sine_Wave1_out1);

  Sum_add_cast <= resize(Sine_Wave_out1_signed, 32);
  Sum_add_cast_1 <= resize(Sine_Wave1_out1_signed, 32);
  Sum_add_temp <= Sum_add_cast + Sum_add_cast_1;
  Sum_out1 <= Sum_add_temp(15 DOWNTO 0);

  Sum_out1_1 <= std_logic_vector(Sum_out1);

  Constant1_out1 <= 1.0;

  
  Constant1_out1_is_not0 <= '1' WHEN Constant1_out1 /= 0.0 ELSE
      '0';

  
  Constant1_out1_is_not0_1 <= '1' WHEN Constant1_out1 /= 0.0 ELSE
      '0';

  Logical_Operator_out1 <= Constant1_out1_is_not0 AND Constant1_out1_is_not0_1;

  FFT_out1_re_signed <= signed(FFT_out1_re);

  Magnitude_Square_real_square <= FFT_out1_re_signed * FFT_out1_re_signed;

  FFT_out1_im_signed <= signed(FFT_out1_im);

  Magnitude_Square_imag_square <= FFT_out1_im_signed * FFT_out1_im_signed;

  
  adder_add_cast <= "011111111111111111111111111111111111111111" WHEN (Magnitude_Square_real_square(83) = '0') AND (Magnitude_Square_real_square(82 DOWNTO 69) /= "00000000000000") ELSE
      "100000000000000000000000000000000000000000" WHEN (Magnitude_Square_real_square(83) = '1') AND (Magnitude_Square_real_square(82 DOWNTO 69) /= "11111111111111") ELSE
      Magnitude_Square_real_square(69 DOWNTO 28) + ('0' & (Magnitude_Square_real_square(83) AND (Magnitude_Square_real_square(27) OR Magnitude_Square_real_square(26) OR Magnitude_Square_real_square(25) OR Magnitude_Square_real_square(24) OR Magnitude_Square_real_square(23) OR Magnitude_Square_real_square(22) OR Magnitude_Square_real_square(21) OR Magnitude_Square_real_square(20) OR Magnitude_Square_real_square(19) OR Magnitude_Square_real_square(18) OR Magnitude_Square_real_square(17) OR Magnitude_Square_real_square(16) OR Magnitude_Square_real_square(15) OR Magnitude_Square_real_square(14) OR Magnitude_Square_real_square(13) OR Magnitude_Square_real_square(12) OR Magnitude_Square_real_square(11) OR Magnitude_Square_real_square(10) OR Magnitude_Square_real_square(9) OR Magnitude_Square_real_square(8) OR Magnitude_Square_real_square(7) OR Magnitude_Square_real_square(6) OR Magnitude_Square_real_square(5) OR Magnitude_Square_real_square(4) OR Magnitude_Square_real_square(3) OR Magnitude_Square_real_square(2) OR Magnitude_Square_real_square(1) OR Magnitude_Square_real_square(0))));
  adder_add_cast_1 <= resize(adder_add_cast, 43);
  
  adder_add_cast_2 <= "011111111111111111111111111111111111111111" WHEN (Magnitude_Square_imag_square(83) = '0') AND (Magnitude_Square_imag_square(82 DOWNTO 69) /= "00000000000000") ELSE
      "100000000000000000000000000000000000000000" WHEN (Magnitude_Square_imag_square(83) = '1') AND (Magnitude_Square_imag_square(82 DOWNTO 69) /= "11111111111111") ELSE
      Magnitude_Square_imag_square(69 DOWNTO 28) + ('0' & (Magnitude_Square_imag_square(83) AND (Magnitude_Square_imag_square(27) OR Magnitude_Square_imag_square(26) OR Magnitude_Square_imag_square(25) OR Magnitude_Square_imag_square(24) OR Magnitude_Square_imag_square(23) OR Magnitude_Square_imag_square(22) OR Magnitude_Square_imag_square(21) OR Magnitude_Square_imag_square(20) OR Magnitude_Square_imag_square(19) OR Magnitude_Square_imag_square(18) OR Magnitude_Square_imag_square(17) OR Magnitude_Square_imag_square(16) OR Magnitude_Square_imag_square(15) OR Magnitude_Square_imag_square(14) OR Magnitude_Square_imag_square(13) OR Magnitude_Square_imag_square(12) OR Magnitude_Square_imag_square(11) OR Magnitude_Square_imag_square(10) OR Magnitude_Square_imag_square(9) OR Magnitude_Square_imag_square(8) OR Magnitude_Square_imag_square(7) OR Magnitude_Square_imag_square(6) OR Magnitude_Square_imag_square(5) OR Magnitude_Square_imag_square(4) OR Magnitude_Square_imag_square(3) OR Magnitude_Square_imag_square(2) OR Magnitude_Square_imag_square(1) OR Magnitude_Square_imag_square(0))));
  adder_add_cast_3 <= resize(adder_add_cast_2, 43);
  adder_add_temp <= adder_add_cast_1 + adder_add_cast_3;
  
  Magnitude_Square_out1 <= "011111111111111111111111111111111111111111" WHEN (adder_add_temp(42) = '0') AND (adder_add_temp(41) /= '0') ELSE
      "100000000000000000000000000000000000000000" WHEN (adder_add_temp(42) = '1') AND (adder_add_temp(41) /= '1') ELSE
      adder_add_temp(41 DOWNTO 0);

  Out1 <= std_logic_vector(Magnitude_Square_out1);

  ce_out <= enb_1_1_1;

  Out2 <= FFT_out2;

END rtl;

