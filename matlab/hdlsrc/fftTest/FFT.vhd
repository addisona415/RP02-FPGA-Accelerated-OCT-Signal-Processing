-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\fftTest\FFT.vhd
-- Created: 2022-11-30 00:07:34
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FFT
-- Source Path: fftTest/FFT
-- Hierarchy Level: 1
-- 
-- FFT
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.fftTest_pkg.ALL;

ENTITY FFT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        dataOut_im                        :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
        validOut                          :   OUT   std_logic
        );
END FFT;


ARCHITECTURE rtl OF FFT IS

  -- Component Declarations
  COMPONENT RADIX22FFT_CTRL1_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_1_1_vld                :   IN    std_logic;
          dinXTwdl_1_1_vld_1              :   IN    std_logic;
          rd_1_Addr                       :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_1_Enb                        :   OUT   std_logic;
          proc_1_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_1_1_re_dly                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          din_1_1_im_dly                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          din_1_vld_dly                   :   IN    std_logic;
          rd_1_Addr                       :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          rd_1_Enb                        :   IN    std_logic;
          proc_1_enb                      :   IN    std_logic;
          dout_1_1_re                     :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          dout_1_1_im                     :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          dout_1_1_vld                    :   OUT   std_logic;
          dinXTwdl_1_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_vld                    :   IN    std_logic;
          dinXTwdl_2_1_vld                :   IN    std_logic;
          rd_2_Addr                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          rd_2_Enb                        :   OUT   std_logic;
          proc_2_enb                      :   OUT   std_logic;
          multiply_2_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_1_1_re                     :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          dout_1_1_im                     :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En28
          dout_1_1_vld                    :   IN    std_logic;
          rd_2_Addr                       :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          rd_2_Enb                        :   IN    std_logic;
          proc_2_enb                      :   IN    std_logic;
          multiply_2_J                    :   IN    std_logic;
          dout_2_1_re                     :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En28
          dout_2_1_im                     :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En28
          dout_2_1_vld                    :   OUT   std_logic;
          dinXTwdl_2_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_3_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_2_1_vld                    :   IN    std_logic;
          twdl_3_1_re                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_3_1_im                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_3_1_vld                :   IN    std_logic;
          dinXTwdl_3_1_vld_1              :   IN    std_logic;
          rd_3_Addr                       :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          rd_3_Enb                        :   OUT   std_logic;
          proc_3_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_3_1_re_dly                  :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En28
          din_3_1_im_dly                  :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En28
          din_3_vld_dly                   :   IN    std_logic;
          rd_3_Addr                       :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          rd_3_Enb                        :   IN    std_logic;
          twdl_3_1_re                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_3_1_im                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          proc_3_enb                      :   IN    std_logic;
          dout_3_1_re                     :   OUT   std_logic_vector(34 DOWNTO 0);  -- sfix35_En28
          dout_3_1_im                     :   OUT   std_logic_vector(34 DOWNTO 0);  -- sfix35_En28
          dout_3_1_vld                    :   OUT   std_logic;
          dinXTwdl_3_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_1_vld                    :   IN    std_logic;
          dinXTwdl_4_1_vld                :   IN    std_logic;
          rd_4_Addr                       :   OUT   std_logic_vector(5 DOWNTO 0);  -- ufix6
          rd_4_Enb                        :   OUT   std_logic;
          proc_4_enb                      :   OUT   std_logic;
          multiply_4_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_3_1_re                     :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En28
          dout_3_1_im                     :   IN    std_logic_vector(34 DOWNTO 0);  -- sfix35_En28
          dout_3_1_vld                    :   IN    std_logic;
          rd_4_Addr                       :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          rd_4_Enb                        :   IN    std_logic;
          proc_4_enb                      :   IN    std_logic;
          multiply_4_J                    :   IN    std_logic;
          dout_4_1_re                     :   OUT   std_logic_vector(35 DOWNTO 0);  -- sfix36_En28
          dout_4_1_im                     :   OUT   std_logic_vector(35 DOWNTO 0);  -- sfix36_En28
          dout_4_1_vld                    :   OUT   std_logic;
          dinXTwdl_4_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_5_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_4_1_vld                    :   IN    std_logic;
          twdl_5_1_re                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_5_1_im                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_5_1_vld                :   IN    std_logic;
          dinXTwdl_5_1_vld_1              :   IN    std_logic;
          rd_5_Addr                       :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
          rd_5_Enb                        :   OUT   std_logic;
          proc_5_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_5_1_re_dly                  :   IN    std_logic_vector(35 DOWNTO 0);  -- sfix36_En28
          din_5_1_im_dly                  :   IN    std_logic_vector(35 DOWNTO 0);  -- sfix36_En28
          din_5_vld_dly                   :   IN    std_logic;
          rd_5_Addr                       :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          rd_5_Enb                        :   IN    std_logic;
          twdl_5_1_re                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_5_1_im                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          proc_5_enb                      :   IN    std_logic;
          dout_5_1_re                     :   OUT   std_logic_vector(36 DOWNTO 0);  -- sfix37_En28
          dout_5_1_im                     :   OUT   std_logic_vector(36 DOWNTO 0);  -- sfix37_En28
          dout_5_1_vld                    :   OUT   std_logic;
          dinXTwdl_5_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_5_1_vld                    :   IN    std_logic;
          dinXTwdl_6_1_vld                :   IN    std_logic;
          rd_6_Addr                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          rd_6_Enb                        :   OUT   std_logic;
          proc_6_enb                      :   OUT   std_logic;
          multiply_6_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_5_1_re                     :   IN    std_logic_vector(36 DOWNTO 0);  -- sfix37_En28
          dout_5_1_im                     :   IN    std_logic_vector(36 DOWNTO 0);  -- sfix37_En28
          dout_5_1_vld                    :   IN    std_logic;
          rd_6_Addr                       :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          rd_6_Enb                        :   IN    std_logic;
          proc_6_enb                      :   IN    std_logic;
          multiply_6_J                    :   IN    std_logic;
          dout_6_1_re                     :   OUT   std_logic_vector(37 DOWNTO 0);  -- sfix38_En28
          dout_6_1_im                     :   OUT   std_logic_vector(37 DOWNTO 0);  -- sfix38_En28
          dout_6_1_vld                    :   OUT   std_logic;
          dinXTwdl_6_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_7_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_6_1_vld                    :   IN    std_logic;
          twdl_7_1_re                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_7_1_im                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_7_1_vld                :   IN    std_logic;
          dinXTwdl_7_1_vld_1              :   IN    std_logic;
          rd_7_Addr                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_7_Enb                        :   OUT   std_logic;
          proc_7_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_7_1_re_dly                  :   IN    std_logic_vector(37 DOWNTO 0);  -- sfix38_En28
          din_7_1_im_dly                  :   IN    std_logic_vector(37 DOWNTO 0);  -- sfix38_En28
          din_7_vld_dly                   :   IN    std_logic;
          rd_7_Addr                       :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          rd_7_Enb                        :   IN    std_logic;
          twdl_7_1_re                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_7_1_im                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          proc_7_enb                      :   IN    std_logic;
          dout_7_1_re                     :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En28
          dout_7_1_im                     :   OUT   std_logic_vector(38 DOWNTO 0);  -- sfix39_En28
          dout_7_1_vld                    :   OUT   std_logic;
          dinXTwdl_7_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_7_1_vld                    :   IN    std_logic;
          dinXTwdl_8_1_vld                :   IN    std_logic;
          rd_8_Addr                       :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_8_Enb                        :   OUT   std_logic;
          proc_8_enb                      :   OUT   std_logic;
          multiply_8_J                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_7_1_re                     :   IN    std_logic_vector(38 DOWNTO 0);  -- sfix39_En28
          dout_7_1_im                     :   IN    std_logic_vector(38 DOWNTO 0);  -- sfix39_En28
          dout_7_1_vld                    :   IN    std_logic;
          rd_8_Addr                       :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          rd_8_Enb                        :   IN    std_logic;
          proc_8_enb                      :   IN    std_logic;
          multiply_8_J                    :   IN    std_logic;
          dout_8_1_re                     :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En28
          dout_8_1_im                     :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40_En28
          dout_8_1_vld                    :   OUT   std_logic;
          dinXTwdl_8_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT TWDLROM_9_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_8_1_vld                    :   IN    std_logic;
          twdl_9_1_re                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_9_1_im                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinXTwdl_9_1_vld                :   IN    std_logic;
          dinXTwdl_9_1_vld_1              :   IN    std_logic;
          rd_9_Addr                       :   OUT   std_logic;  -- ufix1
          rd_9_Enb                        :   OUT   std_logic;
          proc_9_enb                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF1_9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_9_1_re_dly                  :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En28
          din_9_1_im_dly                  :   IN    std_logic_vector(39 DOWNTO 0);  -- sfix40_En28
          din_9_vld_dly                   :   IN    std_logic;
          rd_9_Addr                       :   IN    std_logic;  -- ufix1
          rd_9_Enb                        :   IN    std_logic;
          twdl_9_1_re                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          twdl_9_1_im                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          proc_9_enb                      :   IN    std_logic;
          dout_9_1_re                     :   OUT   std_logic_vector(40 DOWNTO 0);  -- sfix41_En28
          dout_9_1_im                     :   OUT   std_logic_vector(40 DOWNTO 0);  -- sfix41_En28
          dout_9_1_vld                    :   OUT   std_logic;
          dinXTwdl_9_1_vld                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_CTRL1_10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_9_1_vld                    :   IN    std_logic;
          dinXTwdl_10_1_vld               :   IN    std_logic;
          rd_10_Addr                      :   OUT   std_logic;
          rd_10_Enb                       :   OUT   std_logic;
          proc_10_enb                     :   OUT   std_logic;
          multiply_10_J                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT RADIX22FFT_SDF2_10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dout_9_1_re                     :   IN    std_logic_vector(40 DOWNTO 0);  -- sfix41_En28
          dout_9_1_im                     :   IN    std_logic_vector(40 DOWNTO 0);  -- sfix41_En28
          dout_9_1_vld                    :   IN    std_logic;
          rd_10_Addr                      :   IN    std_logic;
          rd_10_Enb                       :   IN    std_logic;
          proc_10_enb                     :   IN    std_logic;
          multiply_10_J                   :   IN    std_logic;
          dout_10_1_re                    :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
          dout_10_1_im                    :   OUT   std_logic_vector(41 DOWNTO 0);  -- sfix42_En28
          dout_10_1_vld                   :   OUT   std_logic;
          dinXTwdl_10_1_vld               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : RADIX22FFT_CTRL1_1
    USE ENTITY work.RADIX22FFT_CTRL1_1(rtl);

  FOR ALL : RADIX22FFT_SDF1_1
    USE ENTITY work.RADIX22FFT_SDF1_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_2
    USE ENTITY work.RADIX22FFT_CTRL1_2(rtl);

  FOR ALL : RADIX22FFT_SDF2_2
    USE ENTITY work.RADIX22FFT_SDF2_2(rtl);

  FOR ALL : TWDLROM_3_1
    USE ENTITY work.TWDLROM_3_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_3
    USE ENTITY work.RADIX22FFT_CTRL1_3(rtl);

  FOR ALL : RADIX22FFT_SDF1_3
    USE ENTITY work.RADIX22FFT_SDF1_3(rtl);

  FOR ALL : RADIX22FFT_CTRL1_4
    USE ENTITY work.RADIX22FFT_CTRL1_4(rtl);

  FOR ALL : RADIX22FFT_SDF2_4
    USE ENTITY work.RADIX22FFT_SDF2_4(rtl);

  FOR ALL : TWDLROM_5_1
    USE ENTITY work.TWDLROM_5_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_5
    USE ENTITY work.RADIX22FFT_CTRL1_5(rtl);

  FOR ALL : RADIX22FFT_SDF1_5
    USE ENTITY work.RADIX22FFT_SDF1_5(rtl);

  FOR ALL : RADIX22FFT_CTRL1_6
    USE ENTITY work.RADIX22FFT_CTRL1_6(rtl);

  FOR ALL : RADIX22FFT_SDF2_6
    USE ENTITY work.RADIX22FFT_SDF2_6(rtl);

  FOR ALL : TWDLROM_7_1
    USE ENTITY work.TWDLROM_7_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_7
    USE ENTITY work.RADIX22FFT_CTRL1_7(rtl);

  FOR ALL : RADIX22FFT_SDF1_7
    USE ENTITY work.RADIX22FFT_SDF1_7(rtl);

  FOR ALL : RADIX22FFT_CTRL1_8
    USE ENTITY work.RADIX22FFT_CTRL1_8(rtl);

  FOR ALL : RADIX22FFT_SDF2_8
    USE ENTITY work.RADIX22FFT_SDF2_8(rtl);

  FOR ALL : TWDLROM_9_1
    USE ENTITY work.TWDLROM_9_1(rtl);

  FOR ALL : RADIX22FFT_CTRL1_9
    USE ENTITY work.RADIX22FFT_CTRL1_9(rtl);

  FOR ALL : RADIX22FFT_SDF1_9
    USE ENTITY work.RADIX22FFT_SDF1_9(rtl);

  FOR ALL : RADIX22FFT_CTRL1_10
    USE ENTITY work.RADIX22FFT_CTRL1_10(rtl);

  FOR ALL : RADIX22FFT_SDF2_10
    USE ENTITY work.RADIX22FFT_SDF2_10(rtl);

  -- Signals
  SIGNAL softReset                        : std_logic;
  SIGNAL dataIn_signed                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL dtc_im                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL intdelay_reg                     : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_1_1_re_dly                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL intdelay_reg_1                   : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL din_1_1_im_dly                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL intdelay_reg_2                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_1_vld_dly                    : std_logic;
  SIGNAL dinXTwdl_1_1_vld                 : std_logic;
  SIGNAL rd_1_Addr                        : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL rd_1_Enb                         : std_logic;
  SIGNAL proc_1_enb                       : std_logic;
  SIGNAL dout_1_1_re                      : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL dout_1_1_im                      : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL dout_1_1_vld                     : std_logic;
  SIGNAL dinXTwdl_2_1_vld                 : std_logic;
  SIGNAL rd_2_Addr                        : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL rd_2_Enb                         : std_logic;
  SIGNAL proc_2_enb                       : std_logic;
  SIGNAL multiply_2_J                     : std_logic;
  SIGNAL dout_2_1_re                      : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL dout_2_1_im                      : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL dout_2_1_vld                     : std_logic;
  SIGNAL dout_2_1_re_signed               : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL dout_2_1_im_signed               : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL intdelay_reg_3                   : vector_of_signed34(0 TO 2);  -- sfix34 [3]
  SIGNAL din_3_1_re_dly                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL intdelay_reg_4                   : vector_of_signed34(0 TO 2);  -- sfix34 [3]
  SIGNAL din_3_1_im_dly                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL intdelay_reg_5                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_3_vld_dly                    : std_logic;
  SIGNAL twdl_3_1_re                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL twdl_3_1_im                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dinXTwdl_3_1_vld                 : std_logic;
  SIGNAL rd_3_Addr                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL rd_3_Enb                         : std_logic;
  SIGNAL proc_3_enb                       : std_logic;
  SIGNAL dout_3_1_re                      : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL dout_3_1_im                      : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL dout_3_1_vld                     : std_logic;
  SIGNAL dinXTwdl_4_1_vld                 : std_logic;
  SIGNAL rd_4_Addr                        : std_logic_vector(5 DOWNTO 0);  -- ufix6
  SIGNAL rd_4_Enb                         : std_logic;
  SIGNAL proc_4_enb                       : std_logic;
  SIGNAL multiply_4_J                     : std_logic;
  SIGNAL dout_4_1_re                      : std_logic_vector(35 DOWNTO 0);  -- ufix36
  SIGNAL dout_4_1_im                      : std_logic_vector(35 DOWNTO 0);  -- ufix36
  SIGNAL dout_4_1_vld                     : std_logic;
  SIGNAL dout_4_1_re_signed               : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL dout_4_1_im_signed               : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL intdelay_reg_6                   : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL din_5_1_re_dly                   : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL intdelay_reg_7                   : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL din_5_1_im_dly                   : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL intdelay_reg_8                   : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_5_vld_dly                    : std_logic;
  SIGNAL twdl_5_1_re                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL twdl_5_1_im                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dinXTwdl_5_1_vld                 : std_logic;
  SIGNAL rd_5_Addr                        : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL rd_5_Enb                         : std_logic;
  SIGNAL proc_5_enb                       : std_logic;
  SIGNAL dout_5_1_re                      : std_logic_vector(36 DOWNTO 0);  -- ufix37
  SIGNAL dout_5_1_im                      : std_logic_vector(36 DOWNTO 0);  -- ufix37
  SIGNAL dout_5_1_vld                     : std_logic;
  SIGNAL dinXTwdl_6_1_vld                 : std_logic;
  SIGNAL rd_6_Addr                        : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL rd_6_Enb                         : std_logic;
  SIGNAL proc_6_enb                       : std_logic;
  SIGNAL multiply_6_J                     : std_logic;
  SIGNAL dout_6_1_re                      : std_logic_vector(37 DOWNTO 0);  -- ufix38
  SIGNAL dout_6_1_im                      : std_logic_vector(37 DOWNTO 0);  -- ufix38
  SIGNAL dout_6_1_vld                     : std_logic;
  SIGNAL dout_6_1_re_signed               : signed(37 DOWNTO 0);  -- sfix38_En28
  SIGNAL dout_6_1_im_signed               : signed(37 DOWNTO 0);  -- sfix38_En28
  SIGNAL intdelay_reg_9                   : vector_of_signed38(0 TO 2);  -- sfix38 [3]
  SIGNAL din_7_1_re_dly                   : signed(37 DOWNTO 0);  -- sfix38_En28
  SIGNAL intdelay_reg_10                  : vector_of_signed38(0 TO 2);  -- sfix38 [3]
  SIGNAL din_7_1_im_dly                   : signed(37 DOWNTO 0);  -- sfix38_En28
  SIGNAL intdelay_reg_11                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_7_vld_dly                    : std_logic;
  SIGNAL twdl_7_1_re                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL twdl_7_1_im                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dinXTwdl_7_1_vld                 : std_logic;
  SIGNAL rd_7_Addr                        : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_7_Enb                         : std_logic;
  SIGNAL proc_7_enb                       : std_logic;
  SIGNAL dout_7_1_re                      : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL dout_7_1_im                      : std_logic_vector(38 DOWNTO 0);  -- ufix39
  SIGNAL dout_7_1_vld                     : std_logic;
  SIGNAL dinXTwdl_8_1_vld                 : std_logic;
  SIGNAL rd_8_Addr                        : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_8_Enb                         : std_logic;
  SIGNAL proc_8_enb                       : std_logic;
  SIGNAL multiply_8_J                     : std_logic;
  SIGNAL dout_8_1_re                      : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL dout_8_1_im                      : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL dout_8_1_vld                     : std_logic;
  SIGNAL dout_8_1_re_signed               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL dout_8_1_im_signed               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL intdelay_reg_12                  : vector_of_signed40(0 TO 2);  -- sfix40 [3]
  SIGNAL din_9_1_re_dly                   : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL intdelay_reg_13                  : vector_of_signed40(0 TO 2);  -- sfix40 [3]
  SIGNAL din_9_1_im_dly                   : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL intdelay_reg_14                  : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL din_9_vld_dly                    : std_logic;
  SIGNAL twdl_9_1_re                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL twdl_9_1_im                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL dinXTwdl_9_1_vld                 : std_logic;
  SIGNAL rd_9_Addr                        : std_logic;  -- ufix1
  SIGNAL rd_9_Enb                         : std_logic;
  SIGNAL proc_9_enb                       : std_logic;
  SIGNAL dout_9_1_re                      : std_logic_vector(40 DOWNTO 0);  -- ufix41
  SIGNAL dout_9_1_im                      : std_logic_vector(40 DOWNTO 0);  -- ufix41
  SIGNAL dout_9_1_vld                     : std_logic;
  SIGNAL dinXTwdl_10_1_vld                : std_logic;
  SIGNAL rd_10_Addr                       : std_logic;
  SIGNAL rd_10_Enb                        : std_logic;
  SIGNAL proc_10_enb                      : std_logic;
  SIGNAL multiply_10_J                    : std_logic;
  SIGNAL dout_10_1_re                     : std_logic_vector(41 DOWNTO 0);  -- ufix42
  SIGNAL dout_10_1_im                     : std_logic_vector(41 DOWNTO 0);  -- ufix42
  SIGNAL dout_10_1_vld                    : std_logic;

BEGIN
  u_CTRL1_1_1 : RADIX22FFT_CTRL1_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld,
              dinXTwdl_1_1_vld_1 => dinXTwdl_1_1_vld,
              rd_1_Addr => rd_1_Addr,  -- ufix9
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb
              );

  u_SDF1_1_1 : RADIX22FFT_SDF1_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_1_1_re_dly => std_logic_vector(din_1_1_re_dly),  -- sfix32_En28
              din_1_1_im_dly => std_logic_vector(din_1_1_im_dly),  -- sfix32_En28
              din_1_vld_dly => din_1_vld_dly,
              rd_1_Addr => rd_1_Addr,  -- ufix9
              rd_1_Enb => rd_1_Enb,
              proc_1_enb => proc_1_enb,
              dout_1_1_re => dout_1_1_re,  -- sfix33_En28
              dout_1_1_im => dout_1_1_im,  -- sfix33_En28
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_1_1_vld => dinXTwdl_1_1_vld
              );

  u_CTRL2_2_1 : RADIX22FFT_CTRL1_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_1_1_vld => dout_1_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix8
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J
              );

  u_SDF2_2_1 : RADIX22FFT_SDF2_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_1_1_re => dout_1_1_re,  -- sfix33_En28
              dout_1_1_im => dout_1_1_im,  -- sfix33_En28
              dout_1_1_vld => dout_1_1_vld,
              rd_2_Addr => rd_2_Addr,  -- ufix8
              rd_2_Enb => rd_2_Enb,
              proc_2_enb => proc_2_enb,
              multiply_2_J => multiply_2_J,
              dout_2_1_re => dout_2_1_re,  -- sfix34_En28
              dout_2_1_im => dout_2_1_im,  -- sfix34_En28
              dout_2_1_vld => dout_2_1_vld,
              dinXTwdl_2_1_vld => dinXTwdl_2_1_vld
              );

  u_twdlROM_3_1 : TWDLROM_3_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_2_1_vld => dout_2_1_vld,
              twdl_3_1_re => twdl_3_1_re,  -- sfix32_En30
              twdl_3_1_im => twdl_3_1_im  -- sfix32_En30
              );

  u_CTRL1_3_1 : RADIX22FFT_CTRL1_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld,
              dinXTwdl_3_1_vld_1 => dinXTwdl_3_1_vld,
              rd_3_Addr => rd_3_Addr,  -- ufix7
              rd_3_Enb => rd_3_Enb,
              proc_3_enb => proc_3_enb
              );

  u_SDF1_3_1 : RADIX22FFT_SDF1_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_3_1_re_dly => std_logic_vector(din_3_1_re_dly),  -- sfix34_En28
              din_3_1_im_dly => std_logic_vector(din_3_1_im_dly),  -- sfix34_En28
              din_3_vld_dly => din_3_vld_dly,
              rd_3_Addr => rd_3_Addr,  -- ufix7
              rd_3_Enb => rd_3_Enb,
              twdl_3_1_re => twdl_3_1_re,  -- sfix32_En30
              twdl_3_1_im => twdl_3_1_im,  -- sfix32_En30
              proc_3_enb => proc_3_enb,
              dout_3_1_re => dout_3_1_re,  -- sfix35_En28
              dout_3_1_im => dout_3_1_im,  -- sfix35_En28
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_3_1_vld => dinXTwdl_3_1_vld
              );

  u_CTRL2_4_1 : RADIX22FFT_CTRL1_4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_3_1_vld => dout_3_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix6
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J
              );

  u_SDF2_4_1 : RADIX22FFT_SDF2_4
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_3_1_re => dout_3_1_re,  -- sfix35_En28
              dout_3_1_im => dout_3_1_im,  -- sfix35_En28
              dout_3_1_vld => dout_3_1_vld,
              rd_4_Addr => rd_4_Addr,  -- ufix6
              rd_4_Enb => rd_4_Enb,
              proc_4_enb => proc_4_enb,
              multiply_4_J => multiply_4_J,
              dout_4_1_re => dout_4_1_re,  -- sfix36_En28
              dout_4_1_im => dout_4_1_im,  -- sfix36_En28
              dout_4_1_vld => dout_4_1_vld,
              dinXTwdl_4_1_vld => dinXTwdl_4_1_vld
              );

  u_twdlROM_5_1 : TWDLROM_5_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_4_1_vld => dout_4_1_vld,
              twdl_5_1_re => twdl_5_1_re,  -- sfix32_En30
              twdl_5_1_im => twdl_5_1_im  -- sfix32_En30
              );

  u_CTRL1_5_1 : RADIX22FFT_CTRL1_5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld,
              dinXTwdl_5_1_vld_1 => dinXTwdl_5_1_vld,
              rd_5_Addr => rd_5_Addr,  -- ufix5
              rd_5_Enb => rd_5_Enb,
              proc_5_enb => proc_5_enb
              );

  u_SDF1_5_1 : RADIX22FFT_SDF1_5
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_5_1_re_dly => std_logic_vector(din_5_1_re_dly),  -- sfix36_En28
              din_5_1_im_dly => std_logic_vector(din_5_1_im_dly),  -- sfix36_En28
              din_5_vld_dly => din_5_vld_dly,
              rd_5_Addr => rd_5_Addr,  -- ufix5
              rd_5_Enb => rd_5_Enb,
              twdl_5_1_re => twdl_5_1_re,  -- sfix32_En30
              twdl_5_1_im => twdl_5_1_im,  -- sfix32_En30
              proc_5_enb => proc_5_enb,
              dout_5_1_re => dout_5_1_re,  -- sfix37_En28
              dout_5_1_im => dout_5_1_im,  -- sfix37_En28
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_5_1_vld => dinXTwdl_5_1_vld
              );

  u_CTRL2_6_1 : RADIX22FFT_CTRL1_6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_5_1_vld => dout_5_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix4
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J
              );

  u_SDF2_6_1 : RADIX22FFT_SDF2_6
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_5_1_re => dout_5_1_re,  -- sfix37_En28
              dout_5_1_im => dout_5_1_im,  -- sfix37_En28
              dout_5_1_vld => dout_5_1_vld,
              rd_6_Addr => rd_6_Addr,  -- ufix4
              rd_6_Enb => rd_6_Enb,
              proc_6_enb => proc_6_enb,
              multiply_6_J => multiply_6_J,
              dout_6_1_re => dout_6_1_re,  -- sfix38_En28
              dout_6_1_im => dout_6_1_im,  -- sfix38_En28
              dout_6_1_vld => dout_6_1_vld,
              dinXTwdl_6_1_vld => dinXTwdl_6_1_vld
              );

  u_twdlROM_7_1 : TWDLROM_7_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_6_1_vld => dout_6_1_vld,
              twdl_7_1_re => twdl_7_1_re,  -- sfix32_En30
              twdl_7_1_im => twdl_7_1_im  -- sfix32_En30
              );

  u_CTRL1_7_1 : RADIX22FFT_CTRL1_7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld,
              dinXTwdl_7_1_vld_1 => dinXTwdl_7_1_vld,
              rd_7_Addr => rd_7_Addr,  -- ufix3
              rd_7_Enb => rd_7_Enb,
              proc_7_enb => proc_7_enb
              );

  u_SDF1_7_1 : RADIX22FFT_SDF1_7
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_7_1_re_dly => std_logic_vector(din_7_1_re_dly),  -- sfix38_En28
              din_7_1_im_dly => std_logic_vector(din_7_1_im_dly),  -- sfix38_En28
              din_7_vld_dly => din_7_vld_dly,
              rd_7_Addr => rd_7_Addr,  -- ufix3
              rd_7_Enb => rd_7_Enb,
              twdl_7_1_re => twdl_7_1_re,  -- sfix32_En30
              twdl_7_1_im => twdl_7_1_im,  -- sfix32_En30
              proc_7_enb => proc_7_enb,
              dout_7_1_re => dout_7_1_re,  -- sfix39_En28
              dout_7_1_im => dout_7_1_im,  -- sfix39_En28
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_7_1_vld => dinXTwdl_7_1_vld
              );

  u_CTRL2_8_1 : RADIX22FFT_CTRL1_8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_7_1_vld => dout_7_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix2
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J
              );

  u_SDF2_8_1 : RADIX22FFT_SDF2_8
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_7_1_re => dout_7_1_re,  -- sfix39_En28
              dout_7_1_im => dout_7_1_im,  -- sfix39_En28
              dout_7_1_vld => dout_7_1_vld,
              rd_8_Addr => rd_8_Addr,  -- ufix2
              rd_8_Enb => rd_8_Enb,
              proc_8_enb => proc_8_enb,
              multiply_8_J => multiply_8_J,
              dout_8_1_re => dout_8_1_re,  -- sfix40_En28
              dout_8_1_im => dout_8_1_im,  -- sfix40_En28
              dout_8_1_vld => dout_8_1_vld,
              dinXTwdl_8_1_vld => dinXTwdl_8_1_vld
              );

  u_twdlROM_9_1 : TWDLROM_9_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_8_1_vld => dout_8_1_vld,
              twdl_9_1_re => twdl_9_1_re,  -- sfix32_En30
              twdl_9_1_im => twdl_9_1_im  -- sfix32_En30
              );

  u_CTRL1_9_1 : RADIX22FFT_CTRL1_9
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld,
              dinXTwdl_9_1_vld_1 => dinXTwdl_9_1_vld,
              rd_9_Addr => rd_9_Addr,  -- ufix1
              rd_9_Enb => rd_9_Enb,
              proc_9_enb => proc_9_enb
              );

  u_SDF1_9_1 : RADIX22FFT_SDF1_9
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din_9_1_re_dly => std_logic_vector(din_9_1_re_dly),  -- sfix40_En28
              din_9_1_im_dly => std_logic_vector(din_9_1_im_dly),  -- sfix40_En28
              din_9_vld_dly => din_9_vld_dly,
              rd_9_Addr => rd_9_Addr,  -- ufix1
              rd_9_Enb => rd_9_Enb,
              twdl_9_1_re => twdl_9_1_re,  -- sfix32_En30
              twdl_9_1_im => twdl_9_1_im,  -- sfix32_En30
              proc_9_enb => proc_9_enb,
              dout_9_1_re => dout_9_1_re,  -- sfix41_En28
              dout_9_1_im => dout_9_1_im,  -- sfix41_En28
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_9_1_vld => dinXTwdl_9_1_vld
              );

  u_CTRL2_10_1 : RADIX22FFT_CTRL1_10
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_9_1_vld => dout_9_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld,
              rd_10_Addr => rd_10_Addr,
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J
              );

  u_SDF2_10_1 : RADIX22FFT_SDF2_10
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dout_9_1_re => dout_9_1_re,  -- sfix41_En28
              dout_9_1_im => dout_9_1_im,  -- sfix41_En28
              dout_9_1_vld => dout_9_1_vld,
              rd_10_Addr => rd_10_Addr,
              rd_10_Enb => rd_10_Enb,
              proc_10_enb => proc_10_enb,
              multiply_10_J => multiply_10_J,
              dout_10_1_re => dout_10_1_re,  -- sfix42_En28
              dout_10_1_im => dout_10_1_im,  -- sfix42_En28
              dout_10_1_vld => dout_10_1_vld,
              dinXTwdl_10_1_vld => dinXTwdl_10_1_vld
              );

  softReset <= '0';

  dataIn_signed <= signed(dataIn);

  dtc_im <= to_signed(0, 32);

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg(0) <= dataIn_signed;
          intdelay_reg(1 TO 2) <= intdelay_reg(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  din_1_1_re_dly <= intdelay_reg(2);

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_1 <= (OTHERS => to_signed(0, 32));
        ELSE 
          intdelay_reg_1(0) <= dtc_im;
          intdelay_reg_1(1 TO 2) <= intdelay_reg_1(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  din_1_1_im_dly <= intdelay_reg_1(2);

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_2 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_2(0) <= validIn;
          intdelay_reg_2(1 TO 2) <= intdelay_reg_2(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  din_1_vld_dly <= intdelay_reg_2(2);

  dout_2_1_re_signed <= signed(dout_2_1_re);

  dout_2_1_im_signed <= signed(dout_2_1_im);

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_3 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_3 <= (OTHERS => to_signed(0, 34));
        ELSE 
          intdelay_reg_3(0) <= dout_2_1_re_signed;
          intdelay_reg_3(1 TO 2) <= intdelay_reg_3(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;

  din_3_1_re_dly <= intdelay_reg_3(2);

  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_4 <= (OTHERS => to_signed(0, 34));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_4 <= (OTHERS => to_signed(0, 34));
        ELSE 
          intdelay_reg_4(0) <= dout_2_1_im_signed;
          intdelay_reg_4(1 TO 2) <= intdelay_reg_4(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;

  din_3_1_im_dly <= intdelay_reg_4(2);

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_5 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_5(0) <= dout_2_1_vld;
          intdelay_reg_5(1 TO 2) <= intdelay_reg_5(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;

  din_3_vld_dly <= intdelay_reg_5(2);

  dout_4_1_re_signed <= signed(dout_4_1_re);

  dout_4_1_im_signed <= signed(dout_4_1_im);

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_6 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_6 <= (OTHERS => to_signed(0, 36));
        ELSE 
          intdelay_reg_6(0) <= dout_4_1_re_signed;
          intdelay_reg_6(1 TO 2) <= intdelay_reg_6(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;

  din_5_1_re_dly <= intdelay_reg_6(2);

  intdelay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_7 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_7 <= (OTHERS => to_signed(0, 36));
        ELSE 
          intdelay_reg_7(0) <= dout_4_1_im_signed;
          intdelay_reg_7(1 TO 2) <= intdelay_reg_7(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;

  din_5_1_im_dly <= intdelay_reg_7(2);

  intdelay_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_8 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_8 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_8(0) <= dout_4_1_vld;
          intdelay_reg_8(1 TO 2) <= intdelay_reg_8(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;

  din_5_vld_dly <= intdelay_reg_8(2);

  dout_6_1_re_signed <= signed(dout_6_1_re);

  dout_6_1_im_signed <= signed(dout_6_1_im);

  intdelay_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_9 <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_9 <= (OTHERS => to_signed(0, 38));
        ELSE 
          intdelay_reg_9(0) <= dout_6_1_re_signed;
          intdelay_reg_9(1 TO 2) <= intdelay_reg_9(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;

  din_7_1_re_dly <= intdelay_reg_9(2);

  intdelay_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_10 <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_10 <= (OTHERS => to_signed(0, 38));
        ELSE 
          intdelay_reg_10(0) <= dout_6_1_im_signed;
          intdelay_reg_10(1 TO 2) <= intdelay_reg_10(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;

  din_7_1_im_dly <= intdelay_reg_10(2);

  intdelay_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_11 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_11 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_11(0) <= dout_6_1_vld;
          intdelay_reg_11(1 TO 2) <= intdelay_reg_11(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;

  din_7_vld_dly <= intdelay_reg_11(2);

  dout_8_1_re_signed <= signed(dout_8_1_re);

  dout_8_1_im_signed <= signed(dout_8_1_im);

  intdelay_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_12 <= (OTHERS => to_signed(0, 40));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_12 <= (OTHERS => to_signed(0, 40));
        ELSE 
          intdelay_reg_12(0) <= dout_8_1_re_signed;
          intdelay_reg_12(1 TO 2) <= intdelay_reg_12(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;

  din_9_1_re_dly <= intdelay_reg_12(2);

  intdelay_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_13 <= (OTHERS => to_signed(0, 40));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_13 <= (OTHERS => to_signed(0, 40));
        ELSE 
          intdelay_reg_13(0) <= dout_8_1_im_signed;
          intdelay_reg_13(1 TO 2) <= intdelay_reg_13(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;

  din_9_1_im_dly <= intdelay_reg_13(2);

  intdelay_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_14 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF softReset = '1' THEN
          intdelay_reg_14 <= (OTHERS => '0');
        ELSE 
          intdelay_reg_14(0) <= dout_8_1_vld;
          intdelay_reg_14(1 TO 2) <= intdelay_reg_14(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;

  din_9_vld_dly <= intdelay_reg_14(2);

  dataOut_re <= dout_10_1_re;

  dataOut_im <= dout_10_1_im;

  validOut <= dout_10_1_vld;

END rtl;

